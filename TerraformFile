parameters {
    booleanParam(name: 'APPLY_INFRA', defaultValue: false, description: 'Appliquer terraform apply ?')
}

pipeline {
    agent any

    environment {
        PATH = "/usr/local/bin:$PATH"
        AWS_DEFAULT_REGION = 'us-west-2'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'credential-git',
                        url: 'https://github.com/kebambaye195-beep/Terraform.git'
                    ]]
                )
            }
        }

            stage('Setup Terraform') {
                steps {
                    sh '''
                        if ! command -v terraform >/dev/null 2>&1; then
                          echo "Installing Terraform locally..."
                          wget -q https://releases.hashicorp.com/terraform/1.9.7/terraform_1.9.7_linux_amd64.zip
                          unzip -o -q terraform_1.9.7_linux_amd64.zip
                          mkdir -p $WORKSPACE/bin
                          mv terraform $WORKSPACE/bin/
                          export PATH=$WORKSPACE/bin:$PATH
                          rm -f terraform_1.9.7_linux_amd64.zip LICENSE.txt
                        else
                          echo "Terraform already installed"
                        fi
                        terraform version

                }
            }


        stage('Terraform Init') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'aws-credentials',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ),
                    string(
                        credentialsId: 'aws-session-token',
                        variable: 'AWS_SESSION_TOKEN'
                    )
                ]) {
                    dir('terraform') {
                        sh '''
                            terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'aws-credentials',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ),
                    string(
                        credentialsId: 'aws-session-token',
                        variable: 'AWS_SESSION_TOKEN'
                    )
                ]) {
                    dir('terraform') {
                        sh '''
                            terraform plan -var-file=terraform.tfvars
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { return params.APPLY_INFRA }
            }
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'aws-credentials',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ),
                    string(
                        credentialsId: 'aws-session-token',
                        variable: 'AWS_SESSION_TOKEN'
                    )
                ]) {
                    dir('terraform') {
                        sh '''
                            terraform apply -auto-approve -var-file=terraform.tfvars
                        '''
                    }
                }
            }
        }
    }
}
